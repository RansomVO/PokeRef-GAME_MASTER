using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Xml.Serialization;
using VanOrman.PokemonGO.GAME_MASTER.DataGenerator.Templates.ManualData;
using static VanOrman.PokemonGO.GAME_MASTER.DataGenerator.Templates.ManualData.FieldResearch._Category._Research;

namespace VanOrman.PokemonGO.GAME_MASTER.DataGenerator.Templates.DataFiles
{
	[Serializable]
	public class Encounter
	{
		#region Properties

		[XmlAttribute(DataType = "date")]
		public DateTime last_updated { get; set; }

		[XmlElement]
		public Pokemon Pokemon { get; set; }

		[XmlElement]
		public Common.PossibilitySet Regular { get; set; }

		[XmlIgnore]
		public PokemonTranslator PokemonTranslator { get; set; }

		#endregion Properties

		#region ctor

		public Encounter() { }

		public Encounter(Pokemon pokemon, Common.PossibilitySet.Possibility[] possibilities, DateTime updateDateTime)
		{
			last_updated = updateDateTime;
			Pokemon = new Pokemon(pokemon);
			Regular = new Common.PossibilitySet(possibilities);
		}

		#endregion ctor

		#region Writers

		private const string srcFolder = @"charts\fieldresearch\";
		private const string xmlFolder = @"encounter\";
		public static string HtmlFileFolder { get { return Path.Combine(Utils.RootFolder, srcFolder); } }
		private static string OutputXmlFolder { get { return Path.Combine(Utils.OutputDataFileFolder, xmlFolder); } }
		private static string ProjXmlFolder { get { return Path.Combine(Utils.DataFileFolder, xmlFolder); } }
		private static string ProjFilePath { get { return Path.Combine(Utils.RootFolder, "encounters.proj"); } }

		/// <summary>
		/// Write out data for Encounters
		/// </summary>
		public static void Write(FieldResearch fieldResearch, GameMasterStatsCalculator gameMasterStatsCalculator)
		{
            DateTime updateDateTime = new DateTime(Math.Max(
                gameMasterStatsCalculator.GameMasterStats.last_updated.Date.Ticks,
                fieldResearch.last_updated.Ticks));

            if (!Directory.Exists(OutputXmlFolder))
				Directory.CreateDirectory(OutputXmlFolder);

			// Write all encounter files. Keeping track if all are up-to-date.
			bool upToDate = true;
			List<int> written = new List<int>();
			foreach (var category in fieldResearch.Category)
				foreach (var research in category.Research)
					if (research.Encounter != null)
						foreach (var encounter in research.Encounter)
							if (!written.Contains(encounter.id))
							{
								written.Add(encounter.id);
								upToDate = WriteEncounter(encounter, updateDateTime) && upToDate;
							}

			if (!upToDate)
			{
				using (TextWriter projWriter = new StreamWriter(ProjFilePath))
				{
					projWriter.WriteLine("<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">");
					projWriter.WriteLine("  <!-- ======================================================================= -->");
					projWriter.WriteLine("  <!-- ============= This file is generated by GM_DataGenerator. ============= -->");
					projWriter.WriteLine("  <!-- ===================== (last_updated=\"" + updateDateTime.ToString(PokeConstants.DateFormat) + "\") ===================== --> ");
					projWriter.WriteLine("  <!-- ======================================================================= -->");
					projWriter.WriteLine("  <ItemGroup>");

					foreach (var category in fieldResearch.Category)
						foreach (var research in category.Research)
							if (research.Encounter != null)
								foreach (var encounter in research.Encounter)
									if (written.Contains(encounter.id))
									{
										written.Remove(encounter.id);

										string encounterFileName = GetFileNameBase(encounter);
										projWriter.WriteLine("    <!-- #region " + encounter.name + " -->");

										// Add .xml as part of _datafiles
										projWriter.WriteLine("    <FixIntermediateFile Include=\"" + ProjXmlFolder + encounterFileName + ".xml\">");
										projWriter.WriteLine(@"      <Visible>true</Visible>");
										projWriter.WriteLine(@"    </FixIntermediateFile>");

										// Add .html.xml as DependentUpon .xsl
										projWriter.WriteLine("    <XslTransform  Include=\"" + srcFolder + encounterFileName + ".html.xml\">");
										projWriter.WriteLine(@"     <Visible>true</Visible>");
										projWriter.WriteLine(@"     <DependentUpon>encounter.xsl</DependentUpon>");
										projWriter.WriteLine(@"     <Dependencies>");
										projWriter.WriteLine(@"       js\global.js;");
										projWriter.WriteLine(@"       " + ProjXmlFolder + encounterFileName + ".xml;");
										projWriter.WriteLine(@"       charts\fieldresearch\index.css;");
										projWriter.WriteLine(@"       charts\index.css;");
										projWriter.WriteLine(@"       index.css;");
										projWriter.WriteLine(@"     </Dependencies>");
										projWriter.WriteLine(@"     <OutputFileName>" + encounterFileName + ".html</OutputFileName>");
										projWriter.WriteLine(@"    </XslTransform>");

										projWriter.WriteLine("    <!-- #endregion " + encounter.name + " -->");
									}

					projWriter.WriteLine("  </ItemGroup>");
					projWriter.WriteLine("</Project>");
				}
			}
		}

		/// <summary>
		/// Write out a single RaidBoss XML file if necessary, then return the text that should be included in the .proj file.
		/// </summary>
		/// <param name="raidboss"></param>
		/// <returns>The text that should be included in the .proj file</returns>
		private static bool WriteEncounter(_Encounter encounter, DateTime updateDateTime)
		{
			bool upToDate = true;
			string encounterFileName = GetFileNameBase(encounter);
			string filePath = Path.Combine(OutputXmlFolder, encounterFileName + ".xml");
			DateTime lastUpdated = Utils.GetLastUpdated(filePath);
			if (!File.Exists(filePath) || lastUpdated < updateDateTime)
			{
				Utils.WriteXML(new Encounter(encounter, Utils.GetEncounterPossibilities(encounter.PokemonTranslator, 15), updateDateTime), filePath);
				upToDate = false;
			}

			string htmlFilePath = Path.Combine(HtmlFileFolder, encounterFileName + ".html.xml");
			if (!File.Exists(htmlFilePath))
			{
				using (TextWriter htmlWriter = new StreamWriter(htmlFilePath))
				{
					htmlWriter.WriteLine("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
					htmlWriter.WriteLine("<!DOCTYPE Root [");
					htmlWriter.WriteLine("  <!ENTITY Constants SYSTEM \"/_datafiles/constants.xml\">");
					htmlWriter.WriteLine("  <!ENTITY Settings SYSTEM \"/_datafiles/settings.xml\">");
					htmlWriter.WriteLine("  <!ENTITY Images SYSTEM \"/_datafiles.manual/images.xml\">");
					htmlWriter.WriteLine("  <!ENTITY Encounter SYSTEM \"/_datafiles/encounter/" + encounterFileName + ".xml\">");
					htmlWriter.WriteLine("]>");
					htmlWriter.WriteLine("<?xml-stylesheet type=\"text/xsl\" href=\"encounter.xsl\" output=\"" + encounterFileName + ".html\"?>");
					htmlWriter.WriteLine("<Root xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
					htmlWriter.WriteLine("  &Constants; ");
					htmlWriter.WriteLine("  &Settings;");
					htmlWriter.WriteLine("  &Images;");
					htmlWriter.WriteLine("  &Encounter;");
					htmlWriter.WriteLine("</Root> ");
				}

				upToDate = false;
			}

			return upToDate;
		}

		private static string GetFileNameBase(Pokemon encounter)
		{
			return "encounter." + encounter.name.ToLower();
		}

		#endregion Writers
	}
}