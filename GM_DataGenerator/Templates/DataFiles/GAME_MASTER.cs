using System;
using System.IO;
using System.Collections.Generic;
using System.Xml.Serialization;

namespace VanOrman.PokemonGO.GAME_MASTER.DataGenerator.Templates.DataFiles
{
	[Serializable]
	public class GAME_MASTERS
	{
		#region Properties

		[XmlAttribute(DataType = "date")]
		public DateTime last_updated { get; set; }

		[XmlElement]
		public _GAME_MASTER[] GAME_MASTER { get; set; }

		#endregion Properties

		#region Internal classes

		[Serializable]
		public class _GAME_MASTER
		{
			#region Properties

			[XmlAttribute]
			public string name { get; set; }

			[XmlAttribute]
			public bool have_original { get; set; }

			[XmlAttribute]
			public ulong timestamp_dec { get; set; }

			[XmlAttribute]
			public string timestamp_hex { get; set; }

			[XmlAttribute]
			public string timestamp { get; set; }

			#endregion Properties

			#region ctor

			public _GAME_MASTER() { }

			public _GAME_MASTER(string _name, bool _have_original)
			{
				name = _name;
				timestamp_hex = GameMasterTimestampUtils.FileNameToHexTimeStamp(name);
				timestamp_dec = GameMasterTimestampUtils.HexTimeStampToTicks(timestamp_hex);
				timestamp = GameMasterTimestampUtils.TicksToDateTime(timestamp_dec).ToString(PokeConstants.DateTimeFormat);
				have_original = _have_original;
			}

			#endregion ctor
		}

		#endregion Internal classes

		#region ctor

		public GAME_MASTERS() { }

		public GAME_MASTERS(_GAME_MASTER[] gameMasters, DateTime updateDateTime)
		{
			last_updated = updateDateTime;
			GAME_MASTER = gameMasters;
		}

		#endregion ctor

		#region Writers

		public static string XmlFilePath { get { return Path.Combine(Utils.OutputDataFileFolder, "GAME_MASTER.xml"); } }
		public static string ProjFilePath { get { return Path.Combine(Utils.RootFolder, "GAME_MASTER.proj"); } }

		/// <summary>
		/// Write out the list of GAME_MASTER files we are using.
		/// </summary>
		public static void Write(Dictionary<string, bool> gameMasters, GameMasterStatsCalculator gameMasterStatsCalculator)
		{
            DateTime updateDateTime = gameMasterStatsCalculator.GameMasterStats.last_updated.Date;

            if (!File.Exists(XmlFilePath) || !File.Exists(ProjFilePath) || Utils.GetLastUpdated(XmlFilePath) < updateDateTime)
			{
				List<GAME_MASTERS._GAME_MASTER> gameMasterList = new List<GAME_MASTERS._GAME_MASTER>();
				using (TextWriter writer = new StreamWriter(ProjFilePath))
				{
					writer.WriteLine("<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">");
					writer.WriteLine("  <!-- ======================================================================= -->");
					writer.WriteLine("  <!-- ============= This file is generated by GM_DataGenerator. ============= -->");
					writer.WriteLine("  <!-- ======================================================================= -->");
					writer.WriteLine("  <ItemGroup>");

					foreach (var gameMaster in gameMasters)
					{
						gameMasterList.Add(new GAME_MASTERS._GAME_MASTER(gameMaster.Key, gameMaster.Value));

						if (gameMaster.Value)
						{
							writer.WriteLine("    <Resource Include=\"_GAME_MASTER\\" + gameMaster.Key + "\"> ");
							writer.WriteLine("      <Visible>true</Visible>");
							writer.WriteLine("    </Resource>");
						}
						writer.WriteLine("    <Resource Include=\"_GAME_MASTER\\" + gameMaster.Key + ".json\"> ");
						writer.WriteLine("      <Visible>true</Visible>");
						writer.WriteLine("    </Resource>");
					}
					writer.WriteLine("  </ItemGroup>");

					writer.WriteLine("  <ItemGroup>");
					writer.WriteLine("    <GameMasterFiles Include=\"_GAME_MASTER\\**\\*.*\" />");
					writer.WriteLine("  </ItemGroup>");
					writer.WriteLine("  <Target Name=\"AfterBuild\">");
					writer.WriteLine("    <Copy SourceFiles=\"@(GameMasterFiles)\" DestinationFolder=\"$(RootOutputFolder)tech\\GAME_MASTER\\archive\\\" />");
					writer.WriteLine("  </Target>");

					writer.WriteLine("</Project>");
				}

				Utils.WriteXML(new GAME_MASTERS(gameMasterList.ToArray(), updateDateTime), XmlFilePath);
			}
		}

		#endregion Writers
	}
}
